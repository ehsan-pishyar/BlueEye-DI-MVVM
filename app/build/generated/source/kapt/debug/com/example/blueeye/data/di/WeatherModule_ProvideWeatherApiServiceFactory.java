// Generated by Dagger (https://dagger.dev).
package com.example.blueeye.data.di;

import com.example.blueeye.data.api.helper.WeatherServiceHelper;
import com.example.blueeye.data.api.helper.WeatherServiceHelperImpl;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherModule_ProvideWeatherApiServiceFactory implements Factory<WeatherServiceHelper> {
  private final Provider<WeatherServiceHelperImpl> weatherServiceHelperImplProvider;

  public WeatherModule_ProvideWeatherApiServiceFactory(
      Provider<WeatherServiceHelperImpl> weatherServiceHelperImplProvider) {
    this.weatherServiceHelperImplProvider = weatherServiceHelperImplProvider;
  }

  @Override
  public WeatherServiceHelper get() {
    return provideWeatherApiService(weatherServiceHelperImplProvider.get());
  }

  public static WeatherModule_ProvideWeatherApiServiceFactory create(
      Provider<WeatherServiceHelperImpl> weatherServiceHelperImplProvider) {
    return new WeatherModule_ProvideWeatherApiServiceFactory(weatherServiceHelperImplProvider);
  }

  public static WeatherServiceHelper provideWeatherApiService(
      WeatherServiceHelperImpl weatherServiceHelperImpl) {
    return Preconditions.checkNotNullFromProvides(WeatherModule.INSTANCE.provideWeatherApiService(weatherServiceHelperImpl));
  }
}
